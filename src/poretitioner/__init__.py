from .signals import Capture, CaptureMetadata, FractionalizedSignal, PicoampereSignal, RawSignal
from .fast5s import BulkFile, SubRun, CaptureFile
from .utils import classify as classify


from .utils.configuration import GeneralConfiguration, SegmentConfiguration
from .utils import filtering as filtering

from typing import Dict, Iterable
from .utils.configuration import readconfig
from .utils.configuration import CONFIG, PoretitionerConfig

from .utils import segment as segmenter


from .getargs import ARG, get_help


def default_config(with_command_line_args: Dict = None) -> PoretitionerConfig:
    path_to_default_config = "/Users/dna/Developer/poretitioner/DEFAULT_PORETITIONER_CONFIG.toml"
    return readconfig(path_to_default_config, command_line_args=with_command_line_args)

def segment(
    config: GeneralConfiguration,
    segment_config: SegmentConfiguration,
    save_location=None,
    overwrite=True,
    sub_run: SubRun=None,
) -> Iterable[CaptureFile]:
    """Identifies the capture regions in a nanopore ionic current signal.

    Parameters
    ----------
    bulk_f5_filepath : str
        Path to the bulk fast5 file, likely generated by the MinKnow software.
    save_location : str
        Directory to save the segmentation results (results will often be saved to more than one file).
    config : Dict
        Segmentaiotn configuration
    sub_run_start_observations : int, optional
        Where to start in the run (e.g. start segmenting after 10 observations). This is useful in cases
        where the run is continuous, but you added a different analyte or wash at some known point in time, by default 0
    sub_run_end_observations : int, optional
        Where to stop segmenting in the run (if anywhere). This is useful in cases
        where the run is continuous, but you added a different analyte or wash at some known point in time, by default None

    Returns
    ----------
    Iterable[CaptureFile]
        An iterable of capture files. This can be used like a list of the segmented captures.

    """
    capture_files = segmenter.segment(segment_config.bulkfast5, config, segment_config, save_location=save_location, capture_criteria=segment_config.capture_criteria ,overwrite=overwrite, sub_run=sub_run)
    return capture_files


